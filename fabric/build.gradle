import org.mtr.BuildTools

plugins {
	id "com.gradleup.shadow"
}

final BuildTools buildTools = new BuildTools(minecraft_version, "fabric", project)

architectury {
	platformSetupLoomIde()
	fabric()
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common

	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
}

dependencies {
	modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"
	modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_api_version"
	modImplementation "com.terraformersmc:modmenu:$modmenu_version"
	shadowBundle "org.mtr:Shadow-Libraries-net:0.0.1"
	shadowBundle "org.mtr:Shadow-Libraries-util:0.0.1"
	shadowBundle "org.mtr:Transport-Simulation-Core:0.0.1"
	shadowBundle "com.logisticscraft:occlusionculling:+"
	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowBundle project(path: ":common", configuration: "transformProductionFabric")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand version: project.version
	}
}

build {
	doLast {
		buildTools.copyBuildFile()
	}
}

shadowJar {
	configurations = [project.configurations.shadowBundle]
	archiveClassifier = "dev-shadow"
	minimize {
		exclude(dependency("org.mtr:Shadow-Libraries-net:.*"))
	}
	relocate "com.logisticscraft", "org.mtr.libraries.com.logisticscraft"
	relocate "de.javagl", "org.mtr.libraries.de.javagl"
}

remapJar {
	inputFile.set shadowJar.archiveFile
}
