import org.apache.tools.ant.filters.ReplaceTokens
import org.mtr.core.Generator
import org.mtr.mod.BuildTools

plugins {
	id "fabric-loom" version "+"
}

final BuildTools buildTools = new BuildTools(minecraftVersion, "fabric", project)

loom {
	accessWidenerPath = file("src/main/resources/mtr.accesswidener")
	runConfigs.configureEach { ideConfigGenerated = true }
	mixin { setDefaultRefmapName("mtr.refmap.json") }
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraftVersion}"
	mappings "net.fabricmc:yarn:${buildTools.getYarnVersion()}:v2"
	modImplementation "net.fabricmc:fabric-loader:${buildTools.getFabricVersion()}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${buildTools.getFabricApiVersion()}"
	modApi "com.terraformersmc:modmenu:${buildTools.getModMenuVersion()}"
	shadowImplementation "org.mtr:Minecraft-Mappings-fabric-${minecraftVersion}:0.0.1-dev"
}

repositories {
	maven { url = "https://maven.terraformersmc.com/" }
}

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(buildTools.javaLanguageVersion))
	}
	withSourcesJar()
	withJavadocJar()
}

tasks.register("setupFiles") {
	copy {
		outputs.upToDateWhen { false }
		from "src/main/KeysTemplate.java"
		into "src/main/java/org/mtr/mod"
		filter(ReplaceTokens, tokens: ["key": patreonApiKey, "version": version + "+" + minecraftVersion, "server": testServer, "debug": debug])
		rename "(.+)Template.java", "\$1.java"
	}

	copy {
		outputs.upToDateWhen { false }
		from "src/main/fabric.mod.template.json"
		into "src/main/resources"
		filter(ReplaceTokens, tokens: ["minecraft": minecraftVersion, "version": version])
		rename "(.+).template.json", "\$1.json"
	}

	buildTools.copyLootTables()
	buildTools.copyFontDefinition()
	buildTools.copyVehicleTemplates()
	Generator.generate(project, "schema/resource", "mod/generated/resource", false, "core.data", "mod.resource")
	Generator.generate(project, "schema/legacy", "legacy/generated/resource", false)
}

build {
	doLast {
		buildTools.copyBuildFile()
	}
}

remapJar {
	dependsOn(shadowJar)
	mustRunAfter(shadowJar)
	inputFile = file(shadowJar.archivePath)
}
