import groovy.json.JsonSlurper
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id "architectury-plugin" version "3.4-SNAPSHOT"
	id "de.undercouch.download" version "4.1.2"
	id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
	id "com.github.johnrengelman.shadow" version "7.1.0" apply false
}

def default_minecraft_version = "1.16.5"
def minecraft_version = rootProject.properties.containsKey("buildVersion") ? rootProject.getProperties().get("buildVersion") : default_minecraft_version
def minecraft_main_version = minecraft_version.split("\\.")[1] as int
def patreon_api_key = rootProject.properties.containsKey("patreonApiKey") ? rootProject.getProperties().get("patreonApiKey") : ""
def blue_map_url = new JsonSlurper().parse(("https://api.github.com/repos/BlueMap-Minecraft/BlueMapAPI/releases/latest").toURL())["assets"][0]["browser_download_url"]

rootProject.ext.fabric_loader_version = new JsonSlurper().parse(("https://meta.fabricmc.net/v2/versions/loader/" + minecraft_version).toURL())[0]["loader"]["version"]
rootProject.ext.forge_version = minecraft_version + "-" + new JsonSlurper().parse(("https://files.minecraftforge.net/net/minecraftforge/forge/promotions_slim.json").toURL())["promos"][minecraft_version + "-latest"]
rootProject.ext.fabric_api_version = getModrinthVersion("fabric", minecraft_version, "fabric-api")
rootProject.ext.mod_menu_version = getModrinthVersion("fabric", minecraft_version, "modmenu")
rootProject.ext.architectury_version = getModrinthVersion("forge", minecraft_version, "architectury-api").split("\\+")[0]

rootProject.ext.architectury_id = minecraft_main_version == 16 ? "me.shedaniel" : "dev.architectury"
rootProject.ext.variation = rootProject.properties.containsKey("variation") ? rootProject.getProperties().get("variation") : "normal"

architectury {
	minecraft = minecraft_version
}

subprojects {
	apply plugin: "dev.architectury.loom"
	apply plugin: "com.github.johnrengelman.shadow"

	loom {
		silentMojangMappingsLicense()
	}

	configurations {
		shadowCommon
	}

	dependencies {
		minecraft "com.mojang:minecraft:${minecraft_version}"
		mappings loom.officialMojangMappings()
		implementation "us.dynmap:dynmap-api:${rootProject.dynmap_version}"
		implementation name: "BlueMapAPI"
		implementation "xyz.jpenilla:squaremap-api:${rootProject.squaremap_version}"
		implementation "org.eclipse.jetty:jetty-http:${rootProject.jetty_version}"
		implementation "org.eclipse.jetty:jetty-io:${rootProject.jetty_version}"
		implementation "org.eclipse.jetty:jetty-security:${rootProject.jetty_version}"
		implementation "org.eclipse.jetty:jetty-server:${rootProject.jetty_version}"
		implementation "org.eclipse.jetty:jetty-servlet:${rootProject.jetty_version}"
		implementation "org.eclipse.jetty:jetty-util:${rootProject.jetty_version}"
		implementation "org.eclipse.jetty:jetty-util-ajax:${rootProject.jetty_version}"
		implementation "javax.servlet:javax.servlet-api:${rootProject.servlet_api_version}"
		implementation "org.msgpack:msgpack-core:${rootProject.messagepack_version}"
		implementation "com.hierynomus:sshj:${rootProject.sshj_version}"
		shadowCommon "org.eclipse.jetty:jetty-http:${rootProject.jetty_version}"
		shadowCommon "org.eclipse.jetty:jetty-io:${rootProject.jetty_version}"
		shadowCommon "org.eclipse.jetty:jetty-security:${rootProject.jetty_version}"
		shadowCommon "org.eclipse.jetty:jetty-server:${rootProject.jetty_version}"
		shadowCommon "org.eclipse.jetty:jetty-servlet:${rootProject.jetty_version}"
		shadowCommon "org.eclipse.jetty:jetty-util:${rootProject.jetty_version}"
		shadowCommon "org.eclipse.jetty:jetty-util-ajax:${rootProject.jetty_version}"
		shadowCommon "javax.servlet:javax.servlet-api:${rootProject.servlet_api_version}"
		shadowCommon "org.msgpack:msgpack-core:${rootProject.messagepack_version}"
	}
}

task setupFiles() {
	System.out.println("Fabric Loader: " + rootProject.fabric_loader_version)
	System.out.println("Forge: " + rootProject.forge_version)
	System.out.println("Fabric API: " + rootProject.fabric_api_version)
	System.out.println("Mod Menu: " + rootProject.mod_menu_version)
	System.out.println("Architectury: " + rootProject.architectury_version)

	download {
		src "https://github.com/jonafanho/Minecraft-Mappings/archive/refs/heads/1.${minecraft_main_version}.zip"
		dest "common/src/main/java/mtr/mappings/mappings.zip"
		overwrite true
		retries - 1
	}
	copy {
		outputs.upToDateWhen { false }
		from(zipTree("common/src/main/java/mtr/mappings/mappings.zip")) { eachFile { file -> file.relativePath = new RelativePath(true, file.relativePath.segments.drop(1) as String[]) } }
		into "common/src/main/java/mtr/mappings"
		filter(ReplaceTokens, tokens: ["package": "mtr.mappings"])
	}
	ant.path { ant.fileset(dir: "common/src/main/java/mtr/mappings", includes: "Fabric*.java") }.list().each {
		ant.move(file: it, todir: "fabric/src/main/java/mtr/mappings")
	}
	ant.path { ant.fileset(dir: "common/src/main/java/mtr/mappings", includes: "Forge*.java") }.list().each {
		ant.move(file: it, todir: "forge/src/main/java/mtr/mappings")
	}

	delete fileTree("common/src/main/resources/assets/mtr/sounds")
	delete fileTree("common/src/main/resources/assets/mtr/textures")
	delete fileTree("common/src/main/resources/assets/mtr/website")
	delete fileTree("common/src/main/resources/assets/mtr/sounds.json")
	delete fileTree("common/src/main/resources/data/mtr/loot_tables")
	delete fileTree("common/src/main/resources/data/mtr/recipes")
	delete fileTree("fabric/src/main/resources")
	delete fileTree("forge/src/main/resources")
	copy {
		outputs.upToDateWhen { false }
		from "resources/common/lifts"
		into "common/src/main/resources"
	}
	if (variation == "normal") {
		copy {
			outputs.upToDateWhen { false }
			from "resources/common/normal"
			into "common/src/main/resources"
		}
	}
	if (variation == "normal" || variation == "server") {
		download {
			src "https://unpkg.com/fabric/dist/fabric.min.js"
			dest "common/src/main/resources/assets/mtr/website/fabric.min.js"
			overwrite true
			retries - 1
		}
		download {
			src "https://raw.githubusercontent.com/bramstein/fontfaceobserver/master/fontfaceobserver.standalone.js"
			dest "common/src/main/resources/assets/mtr/website/fontfaceobserver.standalone.js"
			overwrite true
			retries - 1
		}
		copy {
			outputs.upToDateWhen { false }
			from "resources/common/normal/data"
			into "common/src/main/resources/data"
		}
		copy {
			outputs.upToDateWhen { false }
			from "resources/common/normal/assets/mtr/website"
			into "common/src/main/resources/assets/mtr/website"
		}
	}
	copy {
		outputs.upToDateWhen { false }
		from "resources/fabric/" + (variation == "lifts" ? "lifts" : "normal")
		into "fabric/src/main/resources"
	}
	copy {
		outputs.upToDateWhen { false }
		from "resources/forge/" + (variation == "lifts" ? "lifts" : "normal")
		into "forge/src/main/resources"
	}

	download {
		src "https://crowdin.com/backend/download/project/minecraft-transit-railway.zip"
		dest "common/src/main/java/mtr/mappings/lang.zip"
		overwrite true
		retries - 1
	}
	copy {
		outputs.upToDateWhen { false }
		from(zipTree("common/src/main/java/mtr/mappings/lang.zip"))
		into "common/src/main/resources/assets/mtr/lang"
	}

	download {
		src blue_map_url
		dest "libs/BlueMapAPI.jar"
		overwrite true
		retries - 1
	}

	copy {
		outputs.upToDateWhen { false }
		from "common/src/main/KeysTemplate.java"
		into "common/src/main/java/mtr"
		filter(ReplaceTokens, tokens: ["key": patreon_api_key, "version": minecraft_version + "-" + rootProject.mod_version, "lifts": variation])
		rename "(.+)Template.java", "\$1.java"
	}
	copy {
		outputs.upToDateWhen { false }
		from "common/src/main/latest.json"
		into "build/latest"
		filter(ReplaceTokens, tokens: ["version": rootProject.mod_version])
	}
	copy {
		outputs.upToDateWhen { false }
		from "common/src/main/version-template.js"
		into "common/src/main/resources/assets/mtr/website"
		filter(ReplaceTokens, tokens: ["version": minecraft_version + "-" + rootProject.mod_version])
		rename "(.+)-template.js", "\$1.js"
	}
	copy {
		outputs.upToDateWhen { false }
		from "fabric/src/main/UnknownPacketMixinTemplate.java"
		into "fabric/src/main/java/mtr/mixin"
		filter(ReplaceTokens, tokens: ["path1": minecraft_main_version <= 17 || minecraft_version == "1.18" ? "apache/logging/log4j" : "slf4j", "path2": minecraft_main_version <= 17 || minecraft_version == "1.18" ? "apache.logging.log4j" : "slf4j"])
		rename "(.+)Template.java", "\$1.java"
	}

	if (minecraft_main_version <= 17) {
		copy {
			outputs.upToDateWhen { false }
			from "fabric/src/main/BlockEntityExtensionTemplate.java"
			into "fabric/src/main/java/" + (minecraft_main_version == 16 ? "me/shedaniel" : "dev") + "/architectury/extensions"
			filter(ReplaceTokens, tokens: ["package": minecraft_main_version == 16 ? "me.shedaniel" : "dev"])
			rename "(.+)Template.java", "\$1.java"
		}
	}
	if (minecraft_main_version != 16) {
		ant.delete(dir: "fabric/src/main/java/me")
	}
	if (minecraft_main_version != 17) {
		ant.delete(dir: "fabric/src/main/java/dev")
	}
}

allprojects {
	apply plugin: "architectury-plugin"

	version = minecraft_version + "-" + rootProject.mod_version
	group = rootProject.maven_group

	repositories {
		maven { url = "https://jitpack.io/" }
		maven { url = "https://maven.terraformersmc.com/" }
		maven { url = "https://repo.mikeprimm.com/" }
		flatDir {
			dirs "../libs"
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"

		if (minecraft_main_version == 16) {
			def targetVersion = 8
			if (JavaVersion.current().isJava9Compatible()) {
				options.release = targetVersion
			}
		} else if (minecraft_main_version == 17) {
			options.release = 16
		} else {
			options.release = 17
		}
	}

	afterEvaluate {
		for (def task in it.tasks) {
			if (task != rootProject.tasks.setupFiles) {
				task.dependsOn rootProject.tasks.setupFiles
			}
		}
	}
}

static def getModrinthVersion(loader, minecraftVersion, projectId) {
	def versionsArray = new JsonSlurper().parse(("https://api.modrinth.com/v2/project/" + projectId + "/version").toURL())
	for (def versionElement : versionsArray) {
		if (versionElement["loaders"].contains(loader) && versionElement["game_versions"].contains(minecraftVersion)) {
			return versionElement["version_number"]
		}
	}
	return ""
}
