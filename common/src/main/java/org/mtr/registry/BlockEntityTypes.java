package org.mtr.registry;

import net.minecraft.block.entity.BlockEntityType;
import org.mtr.MTR;
import org.mtr.block.*;

public final class BlockEntityTypes {

	static {
		APG_DOOR = Registry.registerBlockEntityType("apg_door", BlockAPGDoor.APGDoorBlockEntity::new, Blocks.APG_DOOR::get);
		APG_GLASS = Registry.registerBlockEntityType("apg_glass", BlockAPGGlass.APGGlassBlockEntity::new, Blocks.APG_GLASS::get);
		ARRIVAL_PROJECTOR_1_LARGE = Registry.registerBlockEntityType("arrival_projector_1_large", BlockArrivalProjector1Large.ArrivalProjector1LargeBlockEntity::new, Blocks.ARRIVAL_PROJECTOR_1_LARGE::get);
		ARRIVAL_PROJECTOR_1_MEDIUM = Registry.registerBlockEntityType("arrival_projector_1_medium", BlockArrivalProjector1Medium.ArrivalProjector1MediumBlockEntity::new, Blocks.ARRIVAL_PROJECTOR_1_MEDIUM::get);
		ARRIVAL_PROJECTOR_1_SMALL = Registry.registerBlockEntityType("arrival_projector_1_small", BlockArrivalProjector1Small.ArrivalProjector1SmallBlockEntity::new, Blocks.ARRIVAL_PROJECTOR_1_SMALL::get);
		CLOCK = Registry.registerBlockEntityType("clock", BlockClock.ClockBlockEntity::new, Blocks.CLOCK::get);
		DRIVER_KEY_DISPENSER = Registry.registerBlockEntityType("driver_key_dispenser", BlockDriverKeyDispenser.DriverKeyDispenserBlockEntity::new, Blocks.DRIVER_KEY_DISPENSER::get);
		LIFT_BUTTONS_1 = Registry.registerBlockEntityType("lift_buttons_1", BlockLiftButtons.LiftButtonsBlockEntity::new, Blocks.LIFT_BUTTONS_1::get);
		LIFT_DOOR_EVEN_1 = Registry.registerBlockEntityType("lift_door_1", BlockLiftDoor.LiftDoorBlockEntity::new, Blocks.LIFT_DOOR_EVEN_1::get);
		LIFT_DOOR_ODD_1 = Registry.registerBlockEntityType("lift_door_odd_1", BlockLiftDoorOdd.LiftDoorOddBlockEntity::new, Blocks.LIFT_DOOR_ODD_1::get);
		LIFT_PANEL_EVEN_1 = Registry.registerBlockEntityType("lift_panel_even_1", BlockLiftPanelEven1.LiftPanelEven1BlockEntity::new, Blocks.LIFT_PANEL_EVEN_1::get);
		LIFT_PANEL_EVEN_2 = Registry.registerBlockEntityType("lift_panel_even_2", BlockLiftPanelEven2.LiftPanelEven2BlockEntity::new, Blocks.LIFT_PANEL_EVEN_2::get);
		LIFT_PANEL_ODD_1 = Registry.registerBlockEntityType("lift_panel_odd_1", BlockLiftPanelOdd1.LiftPanelOdd1BlockEntity::new, Blocks.LIFT_PANEL_ODD_1::get);
		LIFT_PANEL_ODD_2 = Registry.registerBlockEntityType("lift_panel_odd_2", BlockLiftPanelOdd2.LiftPanelOdd2BlockEntity::new, Blocks.LIFT_PANEL_ODD_2::get);
		LIFT_TRACK_FLOOR_1 = Registry.registerBlockEntityType("lift_track_floor_1", BlockLiftTrackFloor.LiftTrackFloorBlockEntity::new, Blocks.LIFT_TRACK_FLOOR_1::get);
		PIDS_HORIZONTAL_1 = Registry.registerBlockEntityType("pids_1", BlockPIDSHorizontal1.PIDSHorizontal1BlockEntity::new, Blocks.PIDS_1::get);
		PIDS_HORIZONTAL_2 = Registry.registerBlockEntityType("pids_2", BlockPIDSHorizontal2.PIDSHorizontal2BlockEntity::new, Blocks.PIDS_2::get);
		PIDS_HORIZONTAL_3 = Registry.registerBlockEntityType("pids_3", BlockPIDSHorizontal3.PIDSHorizontal3BlockEntity::new, Blocks.PIDS_3::get);
		PIDS_VERTICAL_1 = Registry.registerBlockEntityType("pids_4", BlockPIDSVertical1.PIDSVertical1BlockEntity::new, Blocks.PIDS_4::get);
		PIDS_VERTICAL_SINGLE_ARRIVAL_1 = Registry.registerBlockEntityType("pids_single_arrival_1", BlockPIDSVerticalSingleArrival1.PIDSVerticalSingleArrival1BlockEntity::new, Blocks.PIDS_SINGLE_ARRIVAL_1::get);
		PSD_DOOR_1 = Registry.registerBlockEntityType("psd_door_1", (pos, state) -> new BlockPSDDoor.PSDDoorBlockEntity(0, pos, state), Blocks.PSD_DOOR_1::get);
		PSD_DOOR_2 = Registry.registerBlockEntityType("psd_door_2", (pos, state) -> new BlockPSDDoor.PSDDoorBlockEntity(1, pos, state), Blocks.PSD_DOOR_2::get);
		PSD_TOP = Registry.registerBlockEntityType("psd_top", BlockPSDTop.PSDTopBlockEntity::new, Blocks.PSD_TOP::get);
		RAILWAY_SIGN_2_EVEN = Registry.registerBlockEntityType("railway_sign_2_even", (pos, state) -> new BlockRailwaySign.RailwaySignBlockEntity(2, false, pos, state), Blocks.RAILWAY_SIGN_2_EVEN::get);
		RAILWAY_SIGN_2_ODD = Registry.registerBlockEntityType("railway_sign_2_odd", (pos, state) -> new BlockRailwaySign.RailwaySignBlockEntity(2, true, pos, state), Blocks.RAILWAY_SIGN_2_ODD::get);
		RAILWAY_SIGN_3_EVEN = Registry.registerBlockEntityType("railway_sign_3_even", (pos, state) -> new BlockRailwaySign.RailwaySignBlockEntity(3, false, pos, state), Blocks.RAILWAY_SIGN_3_EVEN::get);
		RAILWAY_SIGN_3_ODD = Registry.registerBlockEntityType("railway_sign_3_odd", (pos, state) -> new BlockRailwaySign.RailwaySignBlockEntity(3, true, pos, state), Blocks.RAILWAY_SIGN_3_ODD::get);
		RAILWAY_SIGN_4_EVEN = Registry.registerBlockEntityType("railway_sign_4_even", (pos, state) -> new BlockRailwaySign.RailwaySignBlockEntity(4, false, pos, state), Blocks.RAILWAY_SIGN_4_EVEN::get);
		RAILWAY_SIGN_4_ODD = Registry.registerBlockEntityType("railway_sign_4_odd", (pos, state) -> new BlockRailwaySign.RailwaySignBlockEntity(4, true, pos, state), Blocks.RAILWAY_SIGN_4_ODD::get);
		RAILWAY_SIGN_5_EVEN = Registry.registerBlockEntityType("railway_sign_5_even", (pos, state) -> new BlockRailwaySign.RailwaySignBlockEntity(5, false, pos, state), Blocks.RAILWAY_SIGN_5_EVEN::get);
		RAILWAY_SIGN_5_ODD = Registry.registerBlockEntityType("railway_sign_5_odd", (pos, state) -> new BlockRailwaySign.RailwaySignBlockEntity(5, true, pos, state), Blocks.RAILWAY_SIGN_5_ODD::get);
		RAILWAY_SIGN_6_EVEN = Registry.registerBlockEntityType("railway_sign_6_even", (pos, state) -> new BlockRailwaySign.RailwaySignBlockEntity(6, false, pos, state), Blocks.RAILWAY_SIGN_6_EVEN::get);
		RAILWAY_SIGN_6_ODD = Registry.registerBlockEntityType("railway_sign_6_odd", (pos, state) -> new BlockRailwaySign.RailwaySignBlockEntity(6, true, pos, state), Blocks.RAILWAY_SIGN_6_ODD::get);
		RAILWAY_SIGN_7_EVEN = Registry.registerBlockEntityType("railway_sign_7_even", (pos, state) -> new BlockRailwaySign.RailwaySignBlockEntity(7, false, pos, state), Blocks.RAILWAY_SIGN_7_EVEN::get);
		RAILWAY_SIGN_7_ODD = Registry.registerBlockEntityType("railway_sign_7_odd", (pos, state) -> new BlockRailwaySign.RailwaySignBlockEntity(7, true, pos, state), Blocks.RAILWAY_SIGN_7_ODD::get);
		ROUTE_SIGN_STANDING_LIGHT = Registry.registerBlockEntityType("route_sign_standing_light", BlockRouteSignStandingLight.RouteSignStandingLightBlockEntity::new, Blocks.ROUTE_SIGN_STANDING_LIGHT::get);
		ROUTE_SIGN_STANDING_METAL = Registry.registerBlockEntityType("route_sign_standing_metal", BlockRouteSignStandingMetal.RouteSignStandingMetalBlockEntity::new, Blocks.ROUTE_SIGN_STANDING_METAL::get);
		ROUTE_SIGN_WALL_LIGHT = Registry.registerBlockEntityType("route_sign_wall_light", BlockRouteSignWallLight.RouteSignWallLightBlockEntity::new, Blocks.ROUTE_SIGN_WALL_LIGHT::get);
		ROUTE_SIGN_WALL_METAL = Registry.registerBlockEntityType("route_sign_wall_metal", BlockRouteSignWallMetal.RouteSignWallMetalBlockEntity::new, Blocks.ROUTE_SIGN_WALL_METAL::get);
		SIGNAL_LIGHT_2_ASPECT_1 = Registry.registerBlockEntityType("signal_light_1", BlockSignalLight2Aspect1.SignalLight2Aspect1BlockEntity::new, Blocks.SIGNAL_LIGHT_2_ASPECT_1::get);
		SIGNAL_LIGHT_2_ASPECT_2 = Registry.registerBlockEntityType("signal_light_2", BlockSignalLight2Aspect2.SignalLight2Aspect2BlockEntity::new, Blocks.SIGNAL_LIGHT_2_ASPECT_2::get);
		SIGNAL_LIGHT_2_ASPECT_3 = Registry.registerBlockEntityType("signal_light_3", BlockSignalLight2Aspect3.SignalLight2Aspect3BlockEntity::new, Blocks.SIGNAL_LIGHT_2_ASPECT_3::get);
		SIGNAL_LIGHT_2_ASPECT_4 = Registry.registerBlockEntityType("signal_light_4", BlockSignalLight2Aspect4.SignalLight2Aspect4BlockEntity::new, Blocks.SIGNAL_LIGHT_2_ASPECT_4::get);
		SIGNAL_LIGHT_3_ASPECT_1 = Registry.registerBlockEntityType("signal_light_3_aspect_1", BlockSignalLight3Aspect1.SignalLight3Aspect1BlockEntity::new, Blocks.SIGNAL_LIGHT_3_ASPECT_1::get);
		SIGNAL_LIGHT_3_ASPECT_2 = Registry.registerBlockEntityType("signal_light_3_aspect_2", BlockSignalLight3Aspect2.SignalLight3Aspect2BlockEntity::new, Blocks.SIGNAL_LIGHT_3_ASPECT_2::get);
		SIGNAL_LIGHT_4_ASPECT_1 = Registry.registerBlockEntityType("signal_light_4_aspect_1", BlockSignalLight4Aspect1.SignalLight4Aspect1BlockEntity::new, Blocks.SIGNAL_LIGHT_4_ASPECT_1::get);
		SIGNAL_LIGHT_4_ASPECT_2 = Registry.registerBlockEntityType("signal_light_4_aspect_2", BlockSignalLight4Aspect2.SignalLight4Aspect2BlockEntity::new, Blocks.SIGNAL_LIGHT_4_ASPECT_2::get);
		SIGNAL_SEMAPHORE_1 = Registry.registerBlockEntityType("signal_semaphore_1", BlockSignalSemaphore1.SignalSemaphore1BlockEntity::new, Blocks.SIGNAL_SEMAPHORE_1::get);
		SIGNAL_SEMAPHORE_2 = Registry.registerBlockEntityType("signal_semaphore_2", BlockSignalSemaphore2.SignalSemaphore2BlockEntity::new, Blocks.SIGNAL_SEMAPHORE_2::get);
		STATION_NAME_ENTRANCE = Registry.registerBlockEntityType("station_name_entrance", BlockStationNameEntrance.StationNameEntranceBlockEntity::new, Blocks.STATION_NAME_ENTRANCE::get);
		STATION_NAME_TALL_BLOCK = Registry.registerBlockEntityType("station_name_tall_block", BlockStationNameTallBlock.StationNameTallBlockBlockEntity::new, Blocks.STATION_NAME_TALL_BLOCK::get);
		STATION_NAME_TALL_BLOCK_DOUBLE_SIDED = Registry.registerBlockEntityType("station_name_tall_block_double_sided", BlockStationNameTallBlockDoubleSided.StationNameTallBlockDoubleSidedBlockEntity::new, Blocks.STATION_NAME_TALL_BLOCK_DOUBLE_SIDED::get);
		STATION_NAME_TALL_WALL = Registry.registerBlockEntityType("station_name_tall_wall", BlockStationNameTallWall.StationNameTallWallBlockEntity::new, Blocks.STATION_NAME_TALL_WALL::get);
		STATION_NAME_TALL_STANDING = Registry.registerBlockEntityType("station_name_tall_standing", BlockStationNameTallStanding.StationNameTallStandingBlockEntity::new, Blocks.STATION_NAME_TALL_STANDING::get);
		STATION_NAME_WALL_BLACK = Registry.registerBlockEntityType("station_name_wall_black", BlockStationNameWallBlack.StationNameWallBlackBlockEntity::new, Blocks.STATION_NAME_WALL_BLACK::get);
		STATION_NAME_WALL_GRAY = Registry.registerBlockEntityType("station_name_wall_gray", BlockStationNameWallGray.StationNameWallGrayBlockEntity::new, Blocks.STATION_NAME_WALL_GRAY::get);
		STATION_NAME_WALL_WHITE = Registry.registerBlockEntityType("station_name_wall", BlockStationNameWallWhite.StationNameWallWhiteBlockEntity::new, Blocks.STATION_NAME_WALL_WHITE::get);
		TACTILE_MAP = Registry.registerBlockEntityType("tactile_map", BlockTactileMap.TactileMapBlockEntity::new, Blocks.TACTILE_MAP::get);
		TRAIN_ANNOUNCER = Registry.registerBlockEntityType("train_announcer", BlockTrainAnnouncer.TrainAnnouncerBlockEntity::new, Blocks.TRAIN_ANNOUNCER::get);
		TRAIN_CARGO_LOADER = Registry.registerBlockEntityType("train_cargo_loader", BlockTrainCargoLoader.TrainCargoLoaderBlockEntity::new, Blocks.TRAIN_CARGO_LOADER::get);
		TRAIN_CARGO_UNLOADER = Registry.registerBlockEntityType("train_cargo_unloader", BlockTrainCargoUnloader.TrainCargoUnloaderBlockEntity::new, Blocks.TRAIN_CARGO_UNLOADER::get);
		TRAIN_REDSTONE_SENSOR = Registry.registerBlockEntityType("train_redstone_sensor", BlockTrainRedstoneSensor.TrainRedstoneSensorBlockEntity::new, Blocks.TRAIN_REDSTONE_SENSOR::get);
		TRAIN_SCHEDULE_SENSOR = Registry.registerBlockEntityType("train_schedule_sensor", BlockTrainScheduleSensor.TrainScheduleSensorBlockEntity::new, Blocks.TRAIN_SCHEDULE_SENSOR::get);
		EYE_CANDY = Registry.registerBlockEntityType("eye_candy", BlockEyeCandy.EyeCandyBlockEntity::new, Blocks.EYE_CANDY::get);
	}

	public static final ObjectHolder<BlockEntityType<BlockAPGDoor.APGDoorBlockEntity>> APG_DOOR;
	public static final ObjectHolder<BlockEntityType<BlockAPGGlass.APGGlassBlockEntity>> APG_GLASS;
	public static final ObjectHolder<BlockEntityType<BlockArrivalProjector1Large.ArrivalProjector1LargeBlockEntity>> ARRIVAL_PROJECTOR_1_LARGE;
	public static final ObjectHolder<BlockEntityType<BlockArrivalProjector1Medium.ArrivalProjector1MediumBlockEntity>> ARRIVAL_PROJECTOR_1_MEDIUM;
	public static final ObjectHolder<BlockEntityType<BlockArrivalProjector1Small.ArrivalProjector1SmallBlockEntity>> ARRIVAL_PROJECTOR_1_SMALL;
	public static final ObjectHolder<BlockEntityType<BlockClock.ClockBlockEntity>> CLOCK;
	public static final ObjectHolder<BlockEntityType<BlockDriverKeyDispenser.DriverKeyDispenserBlockEntity>> DRIVER_KEY_DISPENSER;
	public static final ObjectHolder<BlockEntityType<BlockLiftButtons.LiftButtonsBlockEntity>> LIFT_BUTTONS_1;
	public static final ObjectHolder<BlockEntityType<BlockLiftDoor.LiftDoorBlockEntity>> LIFT_DOOR_EVEN_1;
	public static final ObjectHolder<BlockEntityType<BlockLiftDoorOdd.LiftDoorOddBlockEntity>> LIFT_DOOR_ODD_1;
	public static final ObjectHolder<BlockEntityType<BlockLiftPanelEven1.LiftPanelEven1BlockEntity>> LIFT_PANEL_EVEN_1;
	public static final ObjectHolder<BlockEntityType<BlockLiftPanelEven2.LiftPanelEven2BlockEntity>> LIFT_PANEL_EVEN_2;
	public static final ObjectHolder<BlockEntityType<BlockLiftPanelOdd1.LiftPanelOdd1BlockEntity>> LIFT_PANEL_ODD_1;
	public static final ObjectHolder<BlockEntityType<BlockLiftPanelOdd2.LiftPanelOdd2BlockEntity>> LIFT_PANEL_ODD_2;
	public static final ObjectHolder<BlockEntityType<BlockLiftTrackFloor.LiftTrackFloorBlockEntity>> LIFT_TRACK_FLOOR_1;
	public static final ObjectHolder<BlockEntityType<BlockPIDSHorizontal1.PIDSHorizontal1BlockEntity>> PIDS_HORIZONTAL_1;
	public static final ObjectHolder<BlockEntityType<BlockPIDSHorizontal2.PIDSHorizontal2BlockEntity>> PIDS_HORIZONTAL_2;
	public static final ObjectHolder<BlockEntityType<BlockPIDSHorizontal3.PIDSHorizontal3BlockEntity>> PIDS_HORIZONTAL_3;
	public static final ObjectHolder<BlockEntityType<BlockPIDSVertical1.PIDSVertical1BlockEntity>> PIDS_VERTICAL_1;
	public static final ObjectHolder<BlockEntityType<BlockPIDSVerticalSingleArrival1.PIDSVerticalSingleArrival1BlockEntity>> PIDS_VERTICAL_SINGLE_ARRIVAL_1;
	public static final ObjectHolder<BlockEntityType<BlockPSDDoor.PSDDoorBlockEntity>> PSD_DOOR_1;
	public static final ObjectHolder<BlockEntityType<BlockPSDDoor.PSDDoorBlockEntity>> PSD_DOOR_2;
	public static final ObjectHolder<BlockEntityType<BlockPSDTop.PSDTopBlockEntity>> PSD_TOP;
	public static final ObjectHolder<BlockEntityType<BlockRailwaySign.RailwaySignBlockEntity>> RAILWAY_SIGN_2_EVEN;
	public static final ObjectHolder<BlockEntityType<BlockRailwaySign.RailwaySignBlockEntity>> RAILWAY_SIGN_2_ODD;
	public static final ObjectHolder<BlockEntityType<BlockRailwaySign.RailwaySignBlockEntity>> RAILWAY_SIGN_3_EVEN;
	public static final ObjectHolder<BlockEntityType<BlockRailwaySign.RailwaySignBlockEntity>> RAILWAY_SIGN_3_ODD;
	public static final ObjectHolder<BlockEntityType<BlockRailwaySign.RailwaySignBlockEntity>> RAILWAY_SIGN_4_EVEN;
	public static final ObjectHolder<BlockEntityType<BlockRailwaySign.RailwaySignBlockEntity>> RAILWAY_SIGN_4_ODD;
	public static final ObjectHolder<BlockEntityType<BlockRailwaySign.RailwaySignBlockEntity>> RAILWAY_SIGN_5_EVEN;
	public static final ObjectHolder<BlockEntityType<BlockRailwaySign.RailwaySignBlockEntity>> RAILWAY_SIGN_5_ODD;
	public static final ObjectHolder<BlockEntityType<BlockRailwaySign.RailwaySignBlockEntity>> RAILWAY_SIGN_6_EVEN;
	public static final ObjectHolder<BlockEntityType<BlockRailwaySign.RailwaySignBlockEntity>> RAILWAY_SIGN_6_ODD;
	public static final ObjectHolder<BlockEntityType<BlockRailwaySign.RailwaySignBlockEntity>> RAILWAY_SIGN_7_EVEN;
	public static final ObjectHolder<BlockEntityType<BlockRailwaySign.RailwaySignBlockEntity>> RAILWAY_SIGN_7_ODD;
	public static final ObjectHolder<BlockEntityType<BlockRouteSignStandingLight.RouteSignStandingLightBlockEntity>> ROUTE_SIGN_STANDING_LIGHT;
	public static final ObjectHolder<BlockEntityType<BlockRouteSignStandingMetal.RouteSignStandingMetalBlockEntity>> ROUTE_SIGN_STANDING_METAL;
	public static final ObjectHolder<BlockEntityType<BlockRouteSignWallLight.RouteSignWallLightBlockEntity>> ROUTE_SIGN_WALL_LIGHT;
	public static final ObjectHolder<BlockEntityType<BlockRouteSignWallMetal.RouteSignWallMetalBlockEntity>> ROUTE_SIGN_WALL_METAL;
	public static final ObjectHolder<BlockEntityType<BlockSignalLight2Aspect1.SignalLight2Aspect1BlockEntity>> SIGNAL_LIGHT_2_ASPECT_1;
	public static final ObjectHolder<BlockEntityType<BlockSignalLight2Aspect2.SignalLight2Aspect2BlockEntity>> SIGNAL_LIGHT_2_ASPECT_2;
	public static final ObjectHolder<BlockEntityType<BlockSignalLight2Aspect3.SignalLight2Aspect3BlockEntity>> SIGNAL_LIGHT_2_ASPECT_3;
	public static final ObjectHolder<BlockEntityType<BlockSignalLight2Aspect4.SignalLight2Aspect4BlockEntity>> SIGNAL_LIGHT_2_ASPECT_4;
	public static final ObjectHolder<BlockEntityType<BlockSignalLight3Aspect1.SignalLight3Aspect1BlockEntity>> SIGNAL_LIGHT_3_ASPECT_1;
	public static final ObjectHolder<BlockEntityType<BlockSignalLight3Aspect2.SignalLight3Aspect2BlockEntity>> SIGNAL_LIGHT_3_ASPECT_2;
	public static final ObjectHolder<BlockEntityType<BlockSignalLight4Aspect1.SignalLight4Aspect1BlockEntity>> SIGNAL_LIGHT_4_ASPECT_1;
	public static final ObjectHolder<BlockEntityType<BlockSignalLight4Aspect2.SignalLight4Aspect2BlockEntity>> SIGNAL_LIGHT_4_ASPECT_2;
	public static final ObjectHolder<BlockEntityType<BlockSignalSemaphore1.SignalSemaphore1BlockEntity>> SIGNAL_SEMAPHORE_1;
	public static final ObjectHolder<BlockEntityType<BlockSignalSemaphore2.SignalSemaphore2BlockEntity>> SIGNAL_SEMAPHORE_2;
	public static final ObjectHolder<BlockEntityType<BlockStationNameEntrance.StationNameEntranceBlockEntity>> STATION_NAME_ENTRANCE;
	public static final ObjectHolder<BlockEntityType<BlockStationNameTallBlock.StationNameTallBlockBlockEntity>> STATION_NAME_TALL_BLOCK;
	public static final ObjectHolder<BlockEntityType<BlockStationNameTallStanding.StationNameTallStandingBlockEntity>> STATION_NAME_TALL_STANDING;
	public static final ObjectHolder<BlockEntityType<BlockStationNameTallBlockDoubleSided.StationNameTallBlockDoubleSidedBlockEntity>> STATION_NAME_TALL_BLOCK_DOUBLE_SIDED;
	public static final ObjectHolder<BlockEntityType<BlockStationNameTallWall.StationNameTallWallBlockEntity>> STATION_NAME_TALL_WALL;
	public static final ObjectHolder<BlockEntityType<BlockStationNameWallBlack.StationNameWallBlackBlockEntity>> STATION_NAME_WALL_BLACK;
	public static final ObjectHolder<BlockEntityType<BlockStationNameWallGray.StationNameWallGrayBlockEntity>> STATION_NAME_WALL_GRAY;
	public static final ObjectHolder<BlockEntityType<BlockStationNameWallWhite.StationNameWallWhiteBlockEntity>> STATION_NAME_WALL_WHITE;
	public static final ObjectHolder<BlockEntityType<BlockTactileMap.TactileMapBlockEntity>> TACTILE_MAP;
	public static final ObjectHolder<BlockEntityType<BlockTrainAnnouncer.TrainAnnouncerBlockEntity>> TRAIN_ANNOUNCER;
	public static final ObjectHolder<BlockEntityType<BlockTrainCargoLoader.TrainCargoLoaderBlockEntity>> TRAIN_CARGO_LOADER;
	public static final ObjectHolder<BlockEntityType<BlockTrainCargoUnloader.TrainCargoUnloaderBlockEntity>> TRAIN_CARGO_UNLOADER;
	public static final ObjectHolder<BlockEntityType<BlockTrainRedstoneSensor.TrainRedstoneSensorBlockEntity>> TRAIN_REDSTONE_SENSOR;
	public static final ObjectHolder<BlockEntityType<BlockTrainScheduleSensor.TrainScheduleSensorBlockEntity>> TRAIN_SCHEDULE_SENSOR;
	public static final ObjectHolder<BlockEntityType<BlockEyeCandy.EyeCandyBlockEntity>> EYE_CANDY;

	public static void init() {
		MTR.LOGGER.info("Registering Minecraft Transit Railway block entity types");
	}
}
