import org.apache.tools.ant.filters.ReplaceTokens
import org.mtr.BuildTools
import org.mtr.core.Generator
import org.mtr.core.WebserverSetup

final BuildTools buildTools = new BuildTools(minecraft_version, "fabric", project)

architectury {
	common enabled_platforms.split(",")
}

dependencies {
	modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version" // For annotations only!
	testImplementation "org.junit.jupiter:junit-jupiter-api:5.+"
	testImplementation "org.junit.platform:junit-platform-launcher:1.+"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.+"
}

tasks.register("setupWebsiteFiles") {
	Generator.generateTypeScript(project, "schema/resource", "../website/src/app/entity/generated")
}

tasks.register("setupFiles") {
	copy {
		outputs.upToDateWhen { false }
		from "src/main/KeysTemplate.java"
		into "src/main/java/org/mtr"
		filter(ReplaceTokens, tokens: ["version": "$mod_version+$minecraft_version".toString(), "debug": debug.toString()])
		rename "(.+)Template.java", "\$1.java"
	}

	copy {
		outputs.upToDateWhen { false }
		from "src/main/fabric.mod.template.json"
		into "src/main/resources"
		filter(ReplaceTokens, tokens: ["minecraft": minecraft_version, "version": mod_version])
		rename "(.+).template.json", "\$1.json"
	}

	buildTools.downloadTranslations(crowdin_api_key)
	buildTools.generateTranslations()
	buildTools.copyVehicleTemplates()
	buildTools.getPatreonList(patreon_api_key)
	buildTools.setupObjLibrary()
	Generator.generateJava(project, "schema/config", "generated/config", false, "config")
	Generator.generateJava(project, "schema/resource", "generated/resource", false, "core.data", "resource")
	Generator.generateJava(project, "schema/legacy", "legacy/generated/resource", false)
	WebserverSetup.setup(project.rootDir, "common/", "")
}
